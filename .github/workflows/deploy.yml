name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    env:
      ENV: ${{ vars.ENV }}
      DOCKER_BUILD_TARGET: ${{ vars.DOCKER_BUILD_TARGET }}
      WORDAY_APP_IMAGE: ${{ secrets.DOCKER_USERNAME }}/worday_app:latest
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      DB_HOST: ${{ vars.DB_HOST }}
      DB_PORT: ${{ vars.DB_PORT }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      TEST_USER_IDS: ${{ secrets.TEST_USER_IDS }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image with docker compose
        run: |
          docker compose build worday_app
          docker tag worday_app:latest $WORDAY_APP_IMAGE
          docker push $WORDAY_APP_IMAGE

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    env:
      WORDAY_APP_IMAGE: ${{ secrets.DOCKER_USERNAME }}/worday_app:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Connect to AWS EC2 instance
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: ${{ secrets.AWS_PORT }}
          script: |
            docker pull $WORDAY_APP_IMAGE
            docker compose up -d
